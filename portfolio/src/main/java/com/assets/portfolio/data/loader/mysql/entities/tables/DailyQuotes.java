/*
 * This file is generated by jOOQ.
*/
package com.assets.portfolio.data.loader.mysql.entities.tables;


import com.assets.portfolio.data.loader.mysql.entities.Keys;
import com.assets.portfolio.data.loader.mysql.entities.Portfolio;
import com.assets.portfolio.data.loader.mysql.entities.tables.records.DailyQuotesRecord;
import org.jooq.*;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.sql.Date;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DailyQuotes extends TableImpl<DailyQuotesRecord> {

    private static final long serialVersionUID = -127774676;

    /**
     * The reference instance of <code>portfolio.daily_quotes</code>
     */
    public static final DailyQuotes DAILY_QUOTES = new DailyQuotes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DailyQuotesRecord> getRecordType() {
        return DailyQuotesRecord.class;
    }

    /**
     * The column <code>portfolio.daily_quotes.id</code>.
     */
    public final TableField<DailyQuotesRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>portfolio.daily_quotes.ticker</code>.
     */
    public final TableField<DailyQuotesRecord, String> TICKER = createField("ticker", org.jooq.impl.SQLDataType.VARCHAR.length(10).nullable(false), this, "");

    /**
     * The column <code>portfolio.daily_quotes.date</code>.
     */
    public final TableField<DailyQuotesRecord, Date> DATE = createField("date", org.jooq.impl.SQLDataType.DATE.nullable(false), this, "");

    /**
     * The column <code>portfolio.daily_quotes.value</code>.
     */
    public final TableField<DailyQuotesRecord, Double> VALUE = createField("value", org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * Create a <code>portfolio.daily_quotes</code> table reference
     */
    public DailyQuotes() {
        this("daily_quotes", null);
    }

    /**
     * Create an aliased <code>portfolio.daily_quotes</code> table reference
     */
    public DailyQuotes(String alias) {
        this(alias, DAILY_QUOTES);
    }

    private DailyQuotes(String alias, Table<DailyQuotesRecord> aliased) {
        this(alias, aliased, null);
    }

    private DailyQuotes(String alias, Table<DailyQuotesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Portfolio.PORTFOLIO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DailyQuotesRecord> getPrimaryKey() {
        return Keys.KEY_DAILY_QUOTES_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DailyQuotesRecord>> getKeys() {
        return Arrays.<UniqueKey<DailyQuotesRecord>>asList(Keys.KEY_DAILY_QUOTES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DailyQuotes as(String alias) {
        return new DailyQuotes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DailyQuotes rename(String name) {
        return new DailyQuotes(name, null);
    }
}
